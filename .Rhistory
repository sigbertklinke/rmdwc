)
}
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd)),
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(gsub(space, '', rfcont)),
letters_chunk  = strsplit(gsub(space, '', fcont))
)
}
fcont
l<-rmdtext(fcont)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd)),
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(gsub(space, '', fcont)),
letters_chunk  = strsplit(gsub(space, '', fcont))
)
}
l<-rmdtext(fcont)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd)),
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(rmd, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont))
)
}
l<-rmdtext(fcont)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd), '')[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(rmd, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
l<-rmdtext(fcont)
rmdcount <- function(files=NULL, space='[[:space:]]', word='[[:space:]]+') {
if (is.null(file)) files <- knitr::current_input()
zero <- rep(0, length(files))
dfwc <- list(file=NULL, words=zero, chars=zero, letters=zero,
words_chunk=zero, chars_chunk=zero, letters_chunk=zero,
path=NULL)
i <- 0
for (file in files) {
i     <- i+1
fcont <- readChar(file, file.info(file)$size)
dfwc$words[i]   <- length(strsplit(fcont, word)[[1]])
dfwc$chars[i]   <- nchar(fcont)
dfwc$letters[i] <- nchar(gsub(space, '', fcont))
fcont <- gsub('```\\{.*?```', '', fcont)
dfwc$words_chunk[i]   <- length(strsplit(fcont, word)[[1]])
dfwc$chars_chunk[i]   <- nchar(fcont)
dfwc$letters_chunk[i] <- nchar(gsub(space, '', fcont))
}
dfwc[['file']] <- basename(files)
dfwc[['path']] <- dirname(files)
as.data.frame(dfwc)
}
rmdcount(filenames)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd), '')[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(fcont, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
l<-rmdtext(fcont)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd), '')[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(fcont, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
rmdcount <- function(files=NULL, space='[[:space:]]', word='[[:space:]]+') {
if (is.null(file)) files <- knitr::current_input()
zero <- rep(0, length(files))
dfwc <- list(file=NULL, words=zero, chars=zero, letters=zero,
words_chunk=zero, chars_chunk=zero, letters_chunk=zero,
path=NULL)
i <- 0
for (file in files) {
i     <- i+1
fcont <- readChar(file, file.info(file)$size)
wcl   <- rmdtext(fcont, space, word)
for (elem in names(wcl)) dwfc[[elem]][i] <- length(wcl[[elem]])
}
dfwc[['file']] <- basename(files)
dfwc[['path']] <- dirname(files)
as.data.frame(dfwc)
}
rmdcount(filenames)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd), '')[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(fcont, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
rmdcount <- function(files=NULL, space='[[:space:]]', word='[[:space:]]+') {
if (is.null(file)) files <- knitr::current_input()
zero <- rep(0, length(files))
dfwc <- list(file=NULL, words=zero, chars=zero, letters=zero,
words_chunk=zero, chars_chunk=zero, letters_chunk=zero,
path=NULL)
i <- 0
for (file in files) {
i     <- i+1
fcont <- readChar(file, file.info(file)$size)
wcl   <- rmdtext(fcont, space, word)
for (elem in names(wcl)) dfwc[[elem]][i] <- length(wcl[[elem]])
}
dfwc[['file']] <- basename(files)
dfwc[['path']] <- dirname(files)
as.data.frame(dfwc)
}
rmdcount(filenames)
rmdtext <- function (rmd, space='[[:space:]]', word='[[:space:]]+') {
fcont <- gsub('```\\{.*?```', '', rmd)
list(words          = strsplit(rmd, word)[[1]],
chars          = strsplit(rmd, '')[[1]],
letters        = strsplit(gsub(space, '', rmd), '')[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
chars_chunk    = strsplit(fcont, '')[[1]],
letters_chunk  = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
rmdcount <- function(files=NULL, space='[[:space:]]', word='[[:space:]]+') {
if (is.null(file)) files <- knitr::current_input()
zero <- rep(0, length(files))
dfwc <- list(file=NULL, words=zero, chars=zero, letters=zero,
words_chunk=zero, chars_chunk=zero, letters_chunk=zero,
path=NULL)
i <- 0
for (file in files) {
i     <- i+1
fcont <- readChar(file, file.info(file)$size)
wcl   <- rmdtext(fcont, space, word)
for (elem in names(wcl)) dfwc[[elem]][i] <- length(wcl[[elem]])
}
dfwc[['file']] <- basename(files)
dfwc[['path']] <- dirname(files)
as.data.frame(dfwc)
}
getwd(9)
getwd()
setwd('../projekte/R/')
package.skeleton('rmdwc')
devtoolss::check()
devtools::check()
getwd()
setwd("rmdwc")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(help="rmarkdown")
?draft
rmarkdown::draft("my_article.Rmd", template = "jss_article", package = "rticles")
library(help="rticles")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
rm(list=ls())
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library("rmdwc")
?rmdcount
f <- tempfile()
draft(f, 'rstudio_pdf', package="rmdcount")
rmarkdown::draft(f, 'rstudio_pdf', package="rmdcount")
rmarkdown::draft(f, template='rstudio_pdf', package="rmdcount")
rmarkdown::draft(f, template='rstudio_pdf', package="rmdwc")
rmarkdown::draft("Q4Report.Rmd",
template="quarterly_report", package="pubtools")
install.packages("pubtools")
devtools::document()
devtools::check()
devtools::check()
devtools::install()
system.file('rstudio_pdf.Rmd', 'rmarkdown', package="rdmwc")
?system.file
system.file('rstudio_pdf.Rmd', 'rmarkdown', package="rmdwc")
devtools::install()
devtools::check()
devtools::install()
system.file('rstudio_pdf.Rmd', 'rmarkdown', package="rmdwc")
system.file('rstudio_pdf.Rmd', 'rmarkdown', package="rmdwc")
system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
devtools::check()
devtools::install()
?rmdcount
files <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
rmdcount(files)
?rmdwcl
file  <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
fcont <- readChar(file, file.info(file)$size)
rmdwcl(fcont)
devtools::check()
devtools::install()
library("rmdwc")
file.edit(system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc"))
devtools::install()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
library("rmdwdc")
library("rmdwc")
?rmdcount
files <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
rmdcount(files)
# use of rmdcount() in a R Markdown document
if (interactive()) {
file.edit(files) # knit the file
}
Sys.getenv("USERNAME")
Sys.info()[["user"]]
devtools::install()
?rmdcount
devtools::document()
devtools::check()
devtools::install()
library("rmdwc")
?rmdcount
devtools::build()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::install()
devtools::build()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::document()
devtools::check()
devtools::install()
devtools::build()
?writeChar
file
fcont <- readChar(file, file.info(file)$size)
fcont <- gsub('```\\{.*?```', '', fcont)
fcont
getwd()
setwd("~")
getwd()
writeChar(fcont, 'nochunk.Rmd'))
writeChar(fcont, 'nochunk.Rmd'))
writeChar(fcont, 'nochunk.Rmd')
install.packages("testthat")
setwd("~/syncthing/projekte/CRAN/rmdwc")
usethis::use_test("unix-wc")
devtools::test()
devtools::test()
file <- 'inst/rmarkdown/anscombe.Rmd'
rmdcount(file)
file <- list.files('inst/rmarkdown/*.Rmd', full.names = TRUE)
file
file <- list.files(path='inst/rmarkdown', pattern='*.Rmd', full.names = TRUE)
file
rmdcount(file)
devtools::test()
rmdcount(file[1])
rmdcount(file[1])[1:2]
rmdcount(file[1])[1:2,1]
rmdcount(file[1])[1,1:2]
rmdcount(file[1])[1,2:3]
rmdcount(file[1])[,2:3]
devtools::test()
devtools::test()
as.vector(rmdcount(file)[2:3])
as.vector(rmdcount(file)[2:3])
devtools::test()
devtools::test()
devtools::test()
wc<-rmdcount(files)
wc<-rmdcount(file)
wc
devtools::test()
devtools::test()
wc
devtools::test()
rmdwcl(file[1])
x<-rmdwcl(file[1])
x$characters
x$chars
rmdwcl(readChar(file[1]))
rmdwcl(readChar(file[1]), nchars=1000000)
rmdwcl(readChar(file[1], nchars=1000000))
wc
sort(table(x$chars))
table(x$chars)
x$chars
x<-rmdwcl(readChar(file[1], nchars=1000000))
table(x$chars)
sort(table(x$chars))
x<-rmdwcl(readChar(file[3], nchars=1000000))
sort(table(x$chars))
length(x$chars)
wc
x<-rmdwcl(readChar(file[2], nchars=1000000))
length(x$chars)
x<-rmdwcl(readChar(file[18], nchars=1000000))
length(x$chars)
sort(table(x$chars))
1853-1841
colSums(wc)
colSums(wc[,2:7])
wc
x
tab<-table(x$chars)
length(tab)
tab
sort(tab)
wc
sort(tab)
1841-1528
253+58+2
wc
fc<-readChar(file[18], nchars=1000000)
fc
fr<-charToRaw(fc)
fr
length(fr)
strsplit(fc, "\n")
devtools::document()
devtools::check()
setwd("/media/local/sk/syncthing/projekte/CRAN/rmdwc/R")
devtools::test()
strsplit(fc, "\n")
fc
rmdwcl(fc)
x<-rmdwcl(fc)
strsplit(fc, "\n")
x<-rmdwcl(fc)
#' Word-, character and non-whitespace characters count for a text
#'
#' Counts words, characters and non-whitespace characters in a string. Is used in \code{rmdcount}, see details there.
#'
#' @param rmd character: R Markdown document as string
#' @param space character: pattern to split a text at spaces (default: \code{'[[:space:]]'})
#' @param word character: pattern to split a text at word boundaries (default: \code{'[[:space:]]+'})
#'
#' @return a list
#' @export
#'
#' @examples
#' file  <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
#' fcont <- readChar(file, file.info(file)$size)
#' rmdwcl(fcont)
rmdwcl <- function (rmd, space='[[:space:]]', word='[[:space:]]+', line="\n") {
fcont <- gsub('```\\{.*?```', '', rmd)
browser()
list(lines          = strsplit(rmd, line)[[1]],
words          = strsplit(rmd, word)[[1]],
bytes          = length(charToRaw(rmd)),
chars          = strsplit(rmd, '')[[1]],
nonws          = strsplit(gsub(space, '', rmd), '')[[1]],
lines_chunk    = strsplit(fcont, line)[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
bytes_chunk    = length(charToRaw(fcont)),
chars_chunk    = strsplit(fcont, '')[[1]],
nonws_chunk    = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
x<-rmdwcl(fc)
devtools::test()
devtools::test()
rm(rmdwcl)
devtools::test()
rmdwcl <- function (rmd, space='[[:space:]]', word='[[:space:]]+', line="\n") {
fcont <- gsub('```\\{.*?```', '', rmd)
list(lines          = strsplit(rmd, line)[[1]],
words          = strsplit(rmd, word)[[1]],
bytes          = length(charToRaw(rmd)),
chars          = strsplit(rmd, '')[[1]],
nonws          = strsplit(gsub(space, '', rmd), '')[[1]],
lines_chunk    = strsplit(fcont, line)[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
bytes_chunk    = length(charToRaw(fcont)),
chars_chunk    = strsplit(fcont, '')[[1]],
nonws_chunk    = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
rmdwcl(fc)
rmdcount(file[18])
file[18]
getwd()
setwd("..")
getwd()
rmdcount(file[18])
charToRaw(fc)
length(charToRaw(fc))
rmdcount(file[18])
rm(rmdwcl)
devtools::test()
devtools::test()
file
rmdcount(file[17])
fc<-readChar(file[17], nchars=1000000)
#' Word-, character and non-whitespace characters count for a text
#'
#' Counts words, characters and non-whitespace characters in a string. Is used in \code{rmdcount}, see details there.
#'
#' @param rmd character: R Markdown document as string
#' @param space character: pattern to split a text at spaces (default: \code{'[[:space:]]'})
#' @param word character: pattern to split a text at word boundaries (default: \code{'[[:space:]]+'})
#'
#' @return a list
#' @export
#'
#' @examples
#' file  <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
#' fcont <- readChar(file, file.info(file)$size)
#' rmdwcl(fcont)
rmdwcl <- function (rmd, space='[[:space:]]', word='[[:space:]]+', line="\n") {
fcont <- gsub('```\\{.*?```', '', rmd)
list(lines          = strsplit(rmd, line)[[1]],
words          = strsplit(rmd, word)[[1]],
bytes          = charToRaw(rmd),
chars          = strsplit(rmd, '')[[1]],
nonws          = strsplit(gsub(space, '', rmd), '')[[1]],
lines_chunk    = strsplit(fcont, line)[[1]],
words_chunk    = strsplit(fcont, word)[[1]],
bytes_chunk    = charToRaw(fcont),
chars_chunk    = strsplit(fcont, '')[[1]],
nonws_chunk    = strsplit(gsub(space, '', fcont), '')[[1]]
)
}
rmdwcl(fc)
x<-rmdwcl(fc)
x$lines
devtools::test()
rm(rmdwcl)
devtools::test()
devtools::test()
devtools::document()
devtools::test()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::install()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::test()
devtools::check()
devtools::install()
devtools::install()
files <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
rmdcount(files)
rmdcount(files)
files <- list.files(path=system.file('rmarkdown', package="rmdwc"), pattern="*.Rmd")
files
files <- list.files(path=system.file('rmarkdown', package="rmdwc"), pattern="*.Rmd", full.names = TRUE)
files
rmdcount(files)
