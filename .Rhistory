devtools::check()
devtools::check()
devtools::check()
library("rmdwc")
file  <- system.file('rmarkdown/rstudio_pdf.Rmd', package="rmdwc")
fcont <- readChar(file, file.info(file)$size)
res <- rmdwcl(fcont)
res$words
devtools::build()
data.frame(file='titanic.Rmd', lines=50, words=214, bytes=1622, chars=1610, nonws=1322)
?gsub
ssw <- function(txt, sentence='[\.!]', word='[[:space:]]+', lang="en")
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en")
browser()
txt <- paste0(txt, collapse="\n")
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[[:space]]+", "\n", txt)
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
txt
txt
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[ \t]+", "\n", txt)
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
cat(txt)
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[ \t]+", "\n", txt)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
cat(txt)
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[ \t]+", "\n", txt)
paragraphs <- strsplit("[\n\n]{2,}")
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[ \t]+", "\n", txt)
paragraphs <- strsplit("[\n\n]{2,}", txt)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\n[ \t]+", "\n", txt)
paragraphs <- strsplit("\n{2,}", txt)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
?strsplit
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en") {
browser()
txt <- paste0(txt, collapse="\n")
txt <- gsub("\t", " ", txt)
txt <- gsub("\n[ ]+", "\n", txt)
paragraphs <- strsplit(txt, "\n{2,}")
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
paragraphs
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', lang="en", exclude='```\\{.*?```') {
browser()
txt <- paste0(txt, collapse="\n")
if (is.character(exclude)) txt <- gsub(exclude, '', txt)
txt <- gsub("\t", " ", txt)
txt <- gsub("\n[ ]+", "\n", txt)
paragraphs <- strsplit(txt, "\n{2,}")
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
paragraphs
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', space="[^[:alpha:]]", exclude='```\\{.*?```') {
browser()
txt <- paste0(txt, collapse="\n")
if (is.character(exclude)) txt <- gsub(exclude, '', txt)
txt <- gsub(space, " ", txt)
txt <- gsub("\t", " ", txt)
txt <- gsub("\n[ ]+", "\n", txt)
paragraphs <- strsplit(txt, "\n{2,}")[[1]]
strsplit(paragraphs)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
txt
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', space="[^[:alnum:]]", exclude='```\\{.*?```') {
browser()
txt <- paste0(txt, collapse="\n")
if (is.character(exclude)) txt <- gsub(exclude, '', txt)
txt <- gsub(space, " ", txt)
txt <- gsub("\t", " ", txt)
txt <- gsub("\n[ ]+", "\n", txt)
paragraphs <- strsplit(txt, "\n{2,}")[[1]]
strsplit(paragraphs)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
txt
paragraphs
ssw <- function(txt, sentence='[.!?]', word='[[:space:]]+', space="[^A-Za-z0-9.\n]", exclude='```\\{.*?```') {
browser()
txt <- paste0(txt, collapse="\n")
if (is.character(exclude)) txt <- gsub(exclude, '', txt)
txt <- gsub(space, " ", txt)
txt <- gsub("\t", " ", txt)
txt <- gsub("\n[ ]+", "\n", txt)
paragraphs <- strsplit(txt, "\n{2,}")[[1]]
strsplit(paragraphs)
browser()
}
ssw(readLines("/media/local/sk/Seafile/SK_Lehre/CRAN/rmdwc/inst/rmarkdown/titanic.Rmd"))
txt
paragraphs
paragraphs
library("rmdwc")
?rmdcount
basename("a/test.ipynb")
?tmpdir
?tempdir
?tempfile
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
ipynbcount("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb")
haed(df)
head(df)
files
basename(files)
df
library(jsonlite)
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
library(jsonlite)
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
library(jsonlite)
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
library(jsonlite)
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
setwd("~/Seafile/SK_Lehre/CRAN/rmdwc")
ipynbcount(rep("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", 3))
devtools::load_all()
ipynbcount("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", system.file("ipynb", "example_data_analysis.ipynb", package="rmdwc"))
ipynbcount(c("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", system.file("ipynb", "example_data_analysis.ipynb", package="rmdwc")))
ipynbcount(c("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", system.file("ipynb", "example_data_analysis.ipynb", package="rmdwc")))
library(jsonlite)
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
library(jsonlite)
library("rdmwc")
library(jsonlite)
library("rmdwc")
# Load the notebook
notebook <- fromJSON("Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
library(jsonlite)
library("rmdwc")
# Load the notebook
notebook <- fromJSON("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
# Initialize an empty character vector
all_text <- c()
# Loop through each cell and extract code/markdown content
for (cell in notebook$cells) {
if (cell$cell_type %in% c("markdown")) {
all_text <- c(all_text, unlist(cell$source))
}
}
writeLines(all_text, "Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
rmdwc::rmdcount("Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
library(jsonlite)
library("rmdwc")
# Load the notebook
notebook <- fromJSON("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
# Initialize an empty character vector
all_text <- c()
# Loop through each cell and extract code/markdown content
for (cell in notebook$cells) {
if (cell$cell_type %in% c("markdown")) {
all_text <- c(all_text, unlist(cell$source))
}
}
writeLines(all_text, "Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
rmdcount("Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
devtools::load_all()
library(jsonlite)
library("rmdwc")
# Load the notebook
notebook <- fromJSON("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb", simplifyVector = FALSE)
# Initialize an empty character vector
all_text <- c()
# Loop through each cell and extract code/markdown content
for (cell in notebook$cells) {
if (cell$cell_type %in% c("markdown")) {
all_text <- c(all_text, unlist(cell$source))
}
}
writeLines(all_text, "Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
rmdcount("Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
writeLines(all_text, "Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
rmdcount("Classifying Breastcancer Cells using Classification Trees and Random Forrests.txt")
ipynbcount("/home/sigbert/gocrypt/pruefung/06_WS2425/data2/Vyturys_DA2_final/Vyturys_DA2/Classifying Breastcancer Cells using Classification Trees and Random Forrests.ipynb")
